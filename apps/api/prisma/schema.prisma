generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  classes           ClassEnrollment[]
  waitlist          WaitList[]
  completedSubjects CompletedSubject[]

  @@map("users")
}

model Subject {
  id                  Int                @id @default(autoincrement())
  name                String
  credits             Int                @default(0)
  classes             Class[]
  targetSubject       Prerequisite[]     @relation("SubjectPrerequisites")
  prerequisiteSubject Prerequisite[]     @relation("PrerequisiteSubjects")
  completedSubjects   CompletedSubject[]

  @@map("subjects")
}

model Prerequisite {
  id                    Int     @id @default(autoincrement())
  targetSubject         Subject @relation("SubjectPrerequisites", fields: [targetSubjectId], references: [id])
  targetSubjectId       Int
  prerequisiteSubject   Subject @relation("PrerequisiteSubjects", fields: [prerequisiteSubjectId], references: [id])
  prerequisiteSubjectId Int

  @@map("prequisites")
}

model Class {
  id          String            @id @default(uuid())
  name        String
  teacher     String
  place       String
  startTime   DateTime
  endTime     DateTime
  maxStudents Int
  enrollments ClassEnrollment[]
  waitlist    WaitList[]
  subject     Subject           @relation(fields: [subjectId], references: [id])
  subjectId   Int

  @@map("classes")
}

model ClassEnrollment {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  class     Class   @relation(fields: [classId], references: [id])
  classId   String

  @@unique([studentId, classId])
  @@map("class_enrollments")
}

model WaitList {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  class     Class   @relation(fields: [classId], references: [id])
  classId   String

  @@unique([studentId, classId])
  @@map("wait_list")
}

model CompletedSubject {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
  passed    Boolean

  @@unique([studentId, subjectId])
  @@map("completed_subjects")
}
